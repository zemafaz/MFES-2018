class TestSchedule is subclass of MyTestCase

instance variables
room1 : Room := new Room(10,100);
room2 : Room := new Room(10,100);
room3 : Room := new Room(10,100);
date1 : Date := new Date(2019,1,1);
date2 : Date := new Date(2019,1,1);
date3 : Date := new Date(2019,1,2);
date4 : Date := new Date(2019,1,3);
schedule1 : Schedule := new Schedule(room1,date1,date2);
schedule2 : Schedule := new Schedule(room2,date1,date1);
schedule3 : Schedule := new Schedule(room3,date3,date3);

operations
-- TODO Define operations here

	--Checks if Room Objects are being created correctly and returning the correct values
	private testGets: () ==> ()
		testGets() == (
					assertEqual(10,schedule1.getRoomSpace());
					assertEqual(room1.getId(),schedule1.getIdRoom());
					assertEqual(100,schedule1.getPricePerDay());
					assertEqual(date2,schedule1.getFinalDate());
					assertEqual(1,schedule1.getNumberOfDays());
					
					assertEqual(10,schedule2.getRoomSpace());
					assertEqual(room2.getId(),schedule2.getIdRoom());
					assertEqual(100,schedule2.getPricePerDay());
					assertEqual(date1,schedule2.getFinalDate());
					assertEqual(1,schedule1.getNumberOfDays());
					
					assertEqual(10,schedule3.getRoomSpace());
					assertEqual(room3.getId(),schedule3.getIdRoom());
					assertEqual(100,schedule3.getPricePerDay());
					assertEqual(date3,schedule3.getFinalDate());
					assertEqual(1,schedule3.getNumberOfDays());
	);
	
	private testOverlaps: () ==> ()
		testOverlaps() == (
			assertTrue(not schedule1.overlaps(date3,date4,room1.getId()));
			assertTrue(schedule1.overlaps(date2,date3,room1.getId()));
			assertTrue(schedule1.overlaps(date1,date1,room1.getId()));
			assertTrue(not schedule1.overlaps(date1,date1,room2.getId()));
			assertTrue(not schedule2.overlaps(date3,date4,room2.getId()));
			assertTrue(schedule2.overlaps(date2,date3,room2.getId()));
			assertTrue(schedule2.overlaps(date1,date2,room2.getId()));
			assertTrue(not schedule2.overlaps(date2,date3,room1.getId()));
			assertTrue(schedule3.overlaps(date2,date3,room3.getId()));
			assertTrue(not schedule3.overlaps(date1,date2,room3.getId()));
			assertTrue(schedule3.overlaps(date3,date4,room3.getId()));
			assertTrue(not schedule3.overlaps(date4,date4,room3.getId()));

	);
	
	private testFinalDateIsSmaller: () ==> ()
		testFinalDateIsSmaller() == (
			(dcl finalDateIsSmaller : Schedule :=new Schedule(room3,date4,date3);
			assertEqual(100,finalDateIsSmaller.getPricePerDay()));
		);
		
	private testFinalDateIsSmallerOverlaps: () ==> ()
		testFinalDateIsSmallerOverlaps() == (
			assertTrue(schedule1.overlaps(date4,date3,room1.getId()));
	);
	 	
	public  test: () ==> ()
	 	test() ==
	 	(
		 	IO`println("\tSchedule Tests");
			testGets();
			testOverlaps();
	  	IO`println("\tTestes das reservas terminados com sucesso!");
	  	
	  	--test Pre and Post conditions, leave the function calls commented
			--testFinalDateIsSmaller()
			--testFinalDateIsSmallerOverlaps();
	 	);

end TestSchedule
class TestEvent is subclass of MyTestCase

instance variables
room1 : Room := new Room(10,100);
room2 : Room := new Room(10,100);
room3 : Room := new Room(6,100);
date1 : Date := new Date(2019,1,1);
date2 : Date := new Date(2019,1,4);
date3 : Date := new Date(2019,1,2);
date4 : Date := new Date(2019,1,3);
schedule1 : Schedule := new Schedule(room1,date1,date2);
schedule2 : Schedule := new Schedule(room2,date1,date1);
schedule3 : Schedule := new Schedule(room3,date3,date3);
visitor1 : Visitor := new Visitor("João");
visitor2 : Visitor := new Visitor("José");
visitor3 : Visitor := new Visitor("Maria");
exhibitor1 : Exhibitor := new Exhibitor("Paulo");
exhibitor2 : Exhibitor := new Exhibitor("Ana");
exhibitor3 : Exhibitor := new Exhibitor("Sofia");
visitor4 : Visitor := new Visitor("João");
visitor5 : Visitor := new Visitor("José");
visitor6 : Visitor := new Visitor("Maria");
visitor7 : Visitor := new Visitor("Maria");


event1 : Event := new Event(schedule1, exhibitor1, 20,"evento1");
event2 : Event := new Event(schedule2, exhibitor2, 20,"evento2");
event3 : Event := new Event(schedule3, exhibitor3, 20,"evento3");
event4 : Event := new Event(schedule3, exhibitor3, 20,"evento4");

operations

	private testCloseandForceCloseEvent: () ==> ()
		testCloseandForceCloseEvent() == (
			event1.closeEvent(new Date(CurrentTime`getYear(), CurrentTime`getMonth(), CurrentTime`getDay()));
			event2.closeEvent(new Date(CurrentTime`getYear(), CurrentTime`getMonth(), CurrentTime`getDay()));
			event3.forceCloseEvent("password");
			
			assertTrue(event1.isClosed());
			assertTrue(event2.isClosed());
			assertTrue(event3.isClosed());
		);
		
		private testGets: () ==> ()
		testGets() == (
			assertEqual(20,event1.getPricePerParticipant());
			assertEqual(true,event1.isClosed());
			assertEqual(400,event1.getCostOfEvent());
			assertEqual(0, event1.getSalesValueOfEvent());
			assertEqual(-400, event1.profit());
			assertEqual(exhibitor1,event1.getExhibitor());
			assertEqual({}, event1.getParticipants());
			assertTrue(event1.has_started());
			assertTrue(event1.has_ended());
			assertEqual(1, event1.getId());
			assertEqual("evento1", event1.getName());
			
			assertEqual(20,event2.getPricePerParticipant());
			assertEqual(true,event2.isClosed());
			assertEqual(100,event2.getCostOfEvent());
			assertEqual(0, event2.getSalesValueOfEvent());
			assertEqual(-100, event2.profit());
			assertEqual(exhibitor2,event2.getExhibitor());
			assertEqual({}, event2.getParticipants());
			assertTrue(event2.has_started());
			assertTrue(event2.has_ended());
			assertEqual(2, event2.getId());
			assertEqual("evento2", event2.getName());
			
			assertEqual(20,event3.getPricePerParticipant());
			assertEqual(true,event3.isClosed());
			assertEqual(100,event3.getCostOfEvent());
			assertEqual(0, event3.getSalesValueOfEvent());
			assertEqual(-100, event3.profit());
			assertEqual(exhibitor3,event3.getExhibitor());
			assertEqual({}, event3.getParticipants());
			assertTrue(event3.has_started());
			assertTrue(event3.has_ended());
			assertEqual(3, event3.getId());
			assertEqual("evento3", event3.getName());
			
			assertEqual(20,event4.getPricePerParticipant());
			assertEqual(false,event4.isClosed());
			assertEqual(100,event4.getCostOfEvent());
			assertEqual(0, event4.getSalesValueOfEvent());
			assertEqual(-100, event4.profit());
			assertEqual(exhibitor3,event4.getExhibitor());
			assertEqual({}, event4.getParticipants());
			assertTrue(event4.has_started());
			assertTrue(event4.has_ended());
			assertEqual(4, event4.getId());
			assertEqual("evento4", event4.getName());
		);
	
	
	private testOverlaps: () ==> ()
		testOverlaps() == (
			assertTrue(event1.overlaps(date3,date4,room1.getId()));
			assertTrue(event1.overlaps(date1,date3,room1.getId()));
			assertTrue(event1.overlaps(date1,date1,room1.getId()));
			assertTrue(not event1.overlaps(date1,date1,room2.getId()));
			assertTrue(not event2.overlaps(date3,date4,room2.getId()));
			assertTrue(event2.overlaps(date1,date3,room2.getId()));
			assertTrue(event2.overlaps(date1,date1,room2.getId()));
			assertTrue(not event2.overlaps(date1,date3,room1.getId()));
			assertTrue(event3.overlaps(date1,date3,room3.getId()));
			assertTrue(not event3.overlaps(date1,date1,room3.getId()));
			assertTrue(event3.overlaps(date3,date4,room3.getId()));
			assertTrue(not event3.overlaps(date4,date4,room3.getId()));
	);
	
	private testParticipants: () ==> ()
		testParticipants () == (
			event4.addParticipant(visitor1);
			event4.addParticipant(visitor2);		
			assertEqual({visitor1,visitor2}, event4.getParticipants());
			assertEqual(2, card event4.getParticipants());
			assertEqual(40, event4.getSalesValueOfEvent());
			assertEqual(-60, event4.profit());
			
			event4.removeParticipant(visitor1);
			event4.removeParticipant(visitor2);
			assertEqual(0, event4.getSalesValueOfEvent());
			assertEqual(-100, event4.profit());
			
			event4.addParticipant(visitor1);
			event4.addParticipant(visitor2);
			event4.addParticipant(visitor3);
			event4.addParticipant(visitor4);
			event4.addParticipant(visitor5);
			event4.addParticipant(visitor6);
			
			assertEqual(6, card event4.getParticipants());
			assertEqual(120, event4.getSalesValueOfEvent());
			assertEqual(20, event4.profit());						
			
			event4.removeParticipant(visitor1);
			event4.removeParticipant(visitor2);
			
			assertTrue(event4.has_participant(visitor3));
			assertTrue(not event4.has_participant(visitor1));
			
			assertEqual(4, card event4.getParticipants());
			assertEqual(80, event4.getSalesValueOfEvent());
			assertEqual(-20, event4.profit());		
			
		);
		
		--test Pre and Post conditions
	private testInvName: () ==> ()
		testInvName () == (
			(dcl NameTooBig : Event :=new Event(schedule1, exhibitor1, 20,"O meu nome tem mais de cinquenta caracteres por isso dá erro");
				assertEqual("O meu nome tem mais de cinquenta caracteres por isso dá erro",NameTooBig.getName());
			);
		);
		
	private testLimitOfParticipants: () ==> ()
		testLimitOfParticipants () == (
			event4.addParticipant(visitor1);
			event4.addParticipant(visitor2);
			assertEqual(6, card event4.getParticipants());
			--fails
			event4.addParticipant(visitor7);
			assertEqual(7, card event4.getParticipants());
		);
		
	private testCloseEventPre: () ==> ()
		testCloseEventPre () == (
			(dcl currentDate : Date := new Date(CurrentTime`getYear(),CurrentTime`getMonth(),CurrentTime`getDay()),
			  schedule : Schedule := new Schedule(room1, currentDate,currentDate),
				event : Event := new Event(schedule,exhibitor1,100,"event");
				event.closeEvent(currentDate);
				assertTrue(event.isClosed());
			);
		);
		
	private testForceCloseEventWrongPassword: () ==> ()
		testForceCloseEventWrongPassword () == (
			event4.forceCloseEvent("testpassword");
		);
	
	private testaddParticipantToClosedEvent: () ==> ()
		testaddParticipantToClosedEvent () == (
			event4.closeEvent(new Date(CurrentTime`getYear(), CurrentTime`getMonth(), CurrentTime`getDay()));
			event4.addParticipant(visitor1);
		);
		
	private testRemoveParticipantFromClosedEvent: () ==> ()
		testRemoveParticipantFromClosedEvent () == (
			event4.removeParticipant(visitor1);
		);
	
	
	public test: () ==> ()
		test() == (
			IO`println("\tEvent Tests");
				testCloseandForceCloseEvent();
				testGets();
				testParticipants();
				testOverlaps();
			IO`println("\tTestes a eventos terminados com sucesso!");
			
			--test Pre and Post conditions, leave the function calls commented~
			--testInvName();
			--testLimitOfParticipants();
			--testCloseEventPre();
			--testForceCloseEventWrongPassword();
			--testaddParticipantToClosedEvent();
			--testRemoveParticipantFromClosedEvent();
		);

end TestEvent